apiVersion: v1
kind: Service
metadata:
  name: lotus-stats
  labels:
    app: lotus-stats
spec:
  clusterIP: None
  selector:
    app: lotus-stats
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lotus-stats
spec:
  selector:
    matchLabels:
      app: lotus-stats
  serviceName: "lotus-stats"
  replicas: 1
  template:
    metadata:
      labels:
        app: lotus-stats
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: lotus-node
          image: "{{ .Values.ImageFullNode }}"
          imagePullPolicy: Always
          command: [
            "lotus",
            "daemon",
          ]
          ports:
            - containerPort: 1234
          volumeMounts:
            - name: lotus-repo
              mountPath: /var/filecoin
            - name: lotus-params
              mountPath: /var/tmp/filecoin-proof-parameters
        - name: lotus-stats
          image: "{{ .Values.ImageStats }}"
          imagePullPolicy: Always
          command: [
            "stats",
            "-repo=/var/filecoin",
          ]
          env:
            - name: INFLUX_ADDR
              value: "{{ .Values.InfluxAddr }}"
            - name: INFLUX_USER
              value: "{{ .Values.InfluxUser }}"
            - name: INFLUX_PASS
              value: "{{ .Values.InfluxPass }}"
          volumeMounts:
            - name: lotus-repo
              mountPath: /var/filecoin
              readOnly: true
      securityContext:
        runAsUser: 1000
        runAsGroup: 100
        fsGroup: 100
  volumeClaimTemplates:
  - metadata:
      name: lotus-repo
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "{{ .Values.StorageClassName }}"
      resources:
        requests:
          storage: 10Gi
  - metadata:
      name: lotus-params
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "{{ .Values.StorageClassName }}"
      resources:
        requests:
          storage: 10Gi
