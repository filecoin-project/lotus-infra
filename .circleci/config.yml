version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  aws-cli: circleci/aws-cli@2.0.0
  helm: circleci/helm@1.2.0
  ansible-playbook: orbss/ansible-playbook@0.0.5
  rust: circleci/rust@1.5.0
  go: circleci/go@1.6.0
  slack: circleci/slack@4.4.2
  terraform: circleci/terraform@3.0.0

# Some of the workflows in this CI config are intended to be triggered over the CircleCI API
# The Circle v2 API allows API users to call a pipeline, and conditionally execute workflows.
# When editing this file, be careful to make sure workflows are run at the right time.

parameters:
  api_workflow_requested:
    type: string
    default: "none"
    description: run different workflows depending on whether triggered through api or git push
  circle_context:
    type: string
    default: sentinel-staging-deploy
    description: circleci context (environment variables, etc) to use
  kubernetes_cluster:
    type: string
    default: mainnet-us-east-2-dev-eks
    description: kubernetes cluster
  aws_region:
    type: string
    default: us-east-2
    description: aws region. should be the region where the kubernetes cluster is running.
  namespace:
    type: string
    default: "error_this_namespace_definitely_does_not_exist"
  release:
    type: string
    default: "lotus-infra_circleci_default_release_changeme"
  chart:
    type: string
    default: "error_this_chart_is_required"
  chart_version:
    type: string
    default: "error_this_chart_version_is_required"
  helm_append:
    type: string
    default: ""
  override_repository:
    type: string
    default: ""
  override_tag:
    type: string
    default: ""
  be_careful:
    type: boolean
    default: true
  lotus_install_network:
    type: string
    default: ""
  lotus_deploy_network:
    type: string
    default: ""
  provision_dev_machines:
    type: boolean
    default: false
  dev_machines:
    type: string
    default: ""
  slack_channel:
    type: string
    default: "netops-circleci-test"


commands:
  install-helm:
    steps:
      - helm/install-helm-client:
          version: v3.5.0
      - run:
          command: |
            helm repo add filecoin https://filecoin-project.github.io/helm-charts
  setup-eks:
    parameters:
      cluster:
        type: string
        description: eks cluster
      region:
        type: string
        description: aws region
    steps:
      - aws-eks/install-aws-iam-authenticator
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          cluster-name: <<parameters.cluster>>
          aws-region: <<parameters.region>>
  git-clone:
    parameters:
      repo:
        type: string
        description: repo url
      where:
        type: string
        description: where to save
      branch:
        type: string
        default: "master"
        description: branch to checkout
    steps:
      - run:
          command: git clone --recurse-submodules --branch << parameters.branch >> << parameters.repo >> << parameters.where >>
  docker-login:
    steps:
      - run:
          command: echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin

jobs:
  # build and push lotus.
  lotus-build-containers:
    parameters:
      tag:
        type: string
        description: lotus tag to checkout
      repo:
        type: string
        description: docker repository
      network:
        type: string
        description: filecoin network
      use_gitsha:
        type: boolean
        default: false
        description: append gitsha to image tag (useful when tag is master)
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - docker-login
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $HOME/lotus
          branch: << parameters.tag >>
      - run:
          name: push docker << parameters.network >> << parameters.tag >> to << parameters.repo >>
          environment:
            USE_GITSHA: << parameters.use_gitsha >>
            DOCKER_TAG: << parameters.network >>-<< parameters.tag >>
          command: |
            echo "gitsha: $USE_GITSHA"
            if [ $USE_GITSHA -eq 1 ]
            then
              echo "gitsha was true"
              DOCKER_TAG=$DOCKER_TAG-$CIRCLE_SHA1
            fi
            scripts/build_containers.bash --src $HOME/lotus --network << parameters.network >> --tag << parameters.tag >> --docker-tag $DOCKER_TAG --repo << parameters.repo >>
            mkdir -p /tmp/circle
            echo -n $DOCKER_TAG > /tmp/circle/docker_tag
            echo -n << parameters.repo >>/lotus > /tmp/circle/docker_repo
      - persist_to_workspace:
          root: /tmp/circle
          paths:
            - docker_tag
            - docker_repo

  lotus-sync-wait:
    parameters:
      cluster:
        type: string
        description: eks cluster name
      region:
        type: string
        description: aws region
      namespace:
        type: string
        description: kubernetes namespace
      pod:
        type: string
        description: kubernetes namespace
    executor: aws-eks/python3
    steps:
      - setup-eks:
          cluster: << parameters.cluster >>
          region: << parameters.region >>
      - run:
          name: Wait until lotus is synced
          command: |
            kubectl -n << parameters.namespace >> wait --for=condition=ready pod << parameters.pod >>
            sleep 10
            kubectl -n << parameters.namespace >> exec << parameters.pod >> -- lotus sync wait

  # This will deploy a helm chart with values stored in this repo.
  # Each release will have two helm values files -- "base.yaml" and <release_name>.yaml
  # and they must be installed in the right directory in this repo.
  helm-deploy:
    parameters:
      cluster:
        type: string
        description: eks cluster name
      region:
        type: string
        description: aws region
      namespace:
        type: string
        description: kubernetes namespace
      release:
        type: string
        description: helm release
      chart:
        type: string
        description: helm chart
      chart_version:
        type: string
        description: helm chart version
      helm_append:
        type: string
        default: ""
        description: Anything more you want to add to the helm commandline
      override_repository:
        type: string
        default: ""
        description: override image.repository in helm chart
      override_tag:
        type: string
        default: ""
        description: override image.tag in helm chart
      override_from_workspace:
        type: boolean
        default: false
        description: override image.repository and image.tag using the workspace.
    executor: aws-eks/python3
    steps:
      - slack/notify:
          event: always
          channel: << pipeline.parameters.slack_channel >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "HELM DEPLOYMENT :shipitparrot: :rocket:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "This looks like a real winner if you ask me.\n\n*release:* << parameters.release >>\n*chart:* << parameters.chart >>/<< parameters.chart_version >>\n*cluster:* << parameters.cluster >>\n*namespace:* << parameters.namespace >>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }
      - checkout
      - setup-eks:
          cluster: << parameters.cluster >>
          region: << parameters.region >>
      - install-helm
      - attach_workspace:
          at: /tmp/circle
      - run:
          name: deploy << parameters.chart >>/<< parameters.release >> to << parameters.cluster >>/<< parameters.namespace >>
          environment:
            OVERRIDE_FROM_WORKSPACE: << parameters.override_from_workspace >>
            DOCKER_TAG: << parameters.override_tag >>
            DOCKER_REPO: << parameters.override_repository >>
            HELM_APPEND: << parameters.helm_append >>
          command: |
            if [ $OVERRIDE_FROM_WORKSPACE -eq 1 ]
            then
              DOCKER_REPO=$(cat /tmp/circle/docker_repo)
              DOCKER_TAG=$(cat /tmp/circle/docker_tag)
            fi
            if [ ! -z "$DOCKER_TAG" ]; then HELM_APPEND=" --set image.tag=${DOCKER_TAG} ${HELM_APPEND}"; fi
            if [ ! -z "$DOCKER_REPO" ]; then HELM_APPEND=" --set image.repository=${DOCKER_REPO} ${HELM_APPEND}"; fi
            echo "all helm overrides being applied:"
            echo $HELM_APPEND
            helm --namespace << parameters.namespace >> upgrade --wait --install --timeout 30m0s << parameters.release >> << parameters.chart >> --version << parameters.chart_version >> --values kubernetes/<< parameters.cluster >>/helm/<< parameters.namespace >>/<< parameters.chart >>/base.yaml --values kubernetes/<< parameters.cluster >>/helm/<< parameters.namespace >>/<< parameters.chart >>/<< parameters.release >>.yaml $HELM_APPEND
      - slack/notify:
          event: fail
          channel: << pipeline.parameters.slack_channel >>
          custom: |
            {
              "blocks": [
                 {
                   "type": "header",
                   "text": {
                     "type": "plain_text",
                     "text": ":alert: :fire: HELM DEPLOYMENT FAILURE :dumpster_fire: :alert:",
                     "emoji": true
                    }
                 },
                 {
                   "type": "section",
                   "text": {
                     "type": "mrkdwn",
                     "text": "Sound the alarm, captain! This ship is going down!\n\nhelm encountered a failure while deploying this code.\n\n*release:* << parameters.release >>\n*chart:* << parameters.chart >>/<< parameters.chart_version >>\n*cluster:* << parameters.cluster >>"
                   }
                 },
                 {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }

  lotus-ansible-reset:
    parameters:
      install_network:
        type: string
      deploy_network:
        type: string
      preseal:
        type: boolean
        default: true
      create_cert:
        type: boolean
        default: true
      build_flags:
        type: string
        default: "-f"
      reset:
        type: boolean
        default: true
      delay:
        type: string
        default: "0"
      branch:
        type: string
        default: "master"
      check:
        type: boolean
        default: true
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: 2xlarge
    environment:
      LOTUSROOT: /home/circleci/.go_workspace/src/github.com/filecoin-project/lotus
    steps:
      - slack/notify:
          event: always
          channel: << pipeline.parameters.slack_channel >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "DEVNET ANSIBLE DEPLOYMENT :filecoin-new:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The network will be reset in about 30 mintues.\nplease check functionality manually once this is complete\n\n*network:* << parameters.deploy_network >>\n*branch:* << parameters.branch >>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }
      - checkout
      - aws-cli/install
      - rust/install
      - run:
          name: install golang
          command: |
            curl -LOs https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
      # - go/install:
      #   # ensure that the cache key matches the go version to clean up lingering source files
      #   # that may not be compatable across versions. Golang recommend to always uninstall the
      #   # entire go directory when updating the install golang version.
      #   # https://golang.org/doc/install
      #   # https://github.com/CircleCI-Public/go-orb/issues/46
      #     version: 1.16.5
      #     cache-key: v1.16.5
      - ansible-playbook/install
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $LOTUSROOT
          branch: << parameters.branch >>
      - run:
          name: install lotus software
          command: |
            sudo apt-get update
            sudo apt-get install libhwloc-dev ocl-icd-opencl-dev
            sudo ln -s /usr/lib/x86_64-linux-gnu/libhwloc.so.15 /usr/lib/x86_64-linux-gnu/libhwloc.so.5
            cd $LOTUSROOT
            GOFLAGS+=-tags=<< parameters.install_network >> make lotus-shed lotus-seed
            sudo install -o root -g root -m 0755 ./lotus-seed ./lotus-shed /usr/local/bin
      - run:
          name: setup secrets
          command: |
            cd ansible
            echo $ANSIBLE_VAULT_PASSWORD > .vault_password
      - run:
          name: ansible reset << parameters.deploy_network >>
          no_output_timeout: 30m
          command: |
            args=(
              "-n" "<< parameters.deploy_network >>"
              "-s" "$LOTUSROOT"
              "-b" "<< parameters.build_flags >>"
              "-d" "<< parameters.delay >>"
              "--verbose"
            )
            << parameters.reset >> && args+=("-r")
            << parameters.preseal >> && args+=("-p")
            << parameters.create_cert >> && args+=("-c")
            << parameters.check >> && args+=("--check")
            cd ansible
            export GOPATH=/home/circleci/.go_workspace
            export TERM=xterm
            echo | ./setup_fildev_network.bash --start-services false "${args[@]}"
      - run:
          name: "halt if check-mode"
          command: |
            << parameters.check >> && circleci-agent step halt; true
      - run:
          name: "remove faucet maintenance"
          command: |
            cd ansible
            ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m file -a 'state=link src=/etc/nginx/sites-available/faucet.conf dest=/etc/nginx/sites-enabled/50-faucet.conf' faucet
      - run:
          name: "restart machines"
          command: |
            cd ansible
            << parameters.check >> || ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m reboot all
      - run:
          name: "capture new genesis"
          command: |
            mkdir /tmp/reset
            ./scripts/encrypt_vault_files.bash
            ./scripts/bundle_changes.bash . /tmp/reset/lotus-infra
            ./scripts/bundle_changes.bash ${LOTUSROOT} /tmp/reset/lotus
      - store_artifacts:
          path: /tmp/reset
      # - run:
      #     name: "upload genesis"
      #     command:
      #       cd $LOTUSROOT
      #       git config --global user.name "filecoin"
      #       git config --global user.email "noreply@filecoin.io"
      #       git commit -am "automated genesis build"
      #       git push origin HEAD:new-genesis-$(date +%d%h%y-%H%M)

  lotus-release-update-calibration:
    parameters:
      # This can be any git ref (eg: branch, tag, commit)
      branch:
        type: string
        default: "NeVeRmAtCh"
      group:
        type: string
        default: "NeVeRmAtCh"
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: 2xlarge
    environment:
      LOTUSROOT: /home/circleci/.go_workspace/src/github.com/filecoin-project/lotus
    steps:
      - slack/notify:
          event: always
          channel: "#netops-circleci-test"
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "LOTUS RELEASE TESTNET UPDATE :filecoin-new:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "A lotus release has triggered an update to the calibration network.\n\n*release*: << parameters.branch >>\n*group*: << parameters.group >>\n\n"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }
      - checkout
      - aws-cli/install
      - rust/install
      - run:
          name: install golang
          command: |
            curl -LOs https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
      # - go/install:
      #     version: 1.16.5
      #     cache-key: v1.16.5
      - ansible-playbook/install
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $LOTUSROOT
          branch: << parameters.branch >>
      - run:
          name: setup vault secrets
          command: |
            cd ansible
            echo $ANSIBLE_VAULT_PASSWORD > .vault_password
      - run:
          name: update << parameters.group >>
          command: |
            args=(
              "--network" "calibration.fildev.network"
              "--src" "$LOTUSROOT"
              "--reboot-daemon"
              "--" "--limit" "<< parameters.group >>"
            )
            cd ansible
            unset GOPATH
            ./upgrade_fildev_network_binaries.bash "${args[@]}"

  lotus-ansible-upgrade:
    parameters:
      deploy_network:
        type: string
      build_flags:
        type: string
        default: "-f"
      branch:
        type: string
        default: "master"
      check:
        type: boolean
        default: true
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: 2xlarge
    environment:
      LOTUSROOT: /home/circleci/.go_workspace/src/github.com/filecoin-project/lotus
    steps:
      - slack/notify:
          event: always
          channel: << pipeline.parameters.slack_channel >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "DEVNET ANSIBLE UPGRADE :filecoin-new:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "network binaries will be upgraded in about 10 mintues.\nplease check functionality manually once this is complete\n\n*network:* << parameters.deploy_network >>\n*branch:* << parameters.branch >>"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }
      - checkout
      - aws-cli/install
      - rust/install
      - run:
          name: install golang
          command: |
            curl -LOs https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
      # - go/install:
      #     version: 1.16.5
      #     cache-key: v1.16.5
      - ansible-playbook/install
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $LOTUSROOT
          branch: << parameters.branch >>
      - run:
          name: setup secrets
          command: |
            cd ansible
            echo $ANSIBLE_VAULT_PASSWORD > .vault_password
      - run:
          name: ansible upgrade << parameters.deploy_network >>
          command: |
            args=(
              "-n" "<< parameters.deploy_network >>"
              "-s" "$LOTUSROOT"
              "-b" "<< parameters.build_flags >>"
              "--verbose"
            )
            << parameters.check >> && args+=("--check")
            cd ansible
            unset GOPATH
            ./upgrade_fildev_network_binaries.bash "${args[@]}"
      - run:
          name: "remove faucet maintenance"
          command: |
            cd ansible
            ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m file -a 'state=link src=/etc/nginx/sites-available/faucet.conf dest=/etc/nginx/sites-enabled/50-faucet.conf' faucet
      - run:
          name: "restart machines"
          command: |
            cd ansible
            << parameters.check >> || ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m reboot all

  terraform-lotus-dev-machines:
    parameters:
      dev_machines:
        type: string
      aws_region:
        type: string
        default: us-east-2
      slack_channel:
        type: string
        default: "#netops-circleci-test"
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    environment:
      AWS_REGION: << parameters.aws_region >>
    steps:
      - slack/notify:
          event: always
          channel: << pipeline.parameters.slack_channel >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Lotus Dev Machines DEPLOYMENT :shipitparrot: :rocket:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "Lotus Dev Machines are being deployed. Check the last step (terraform apply) for SSH connection strings"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }
      - checkout
      - run:
          name: write machines json to file
          command: |
            echo '<< parameters.dev_machines >>' > terraform/lotus-dev-machines/<< parameters.aws_region >>/machines.tfvars.json
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.8
      - terraform/validate:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
      - terraform/init:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
      - terraform/plan:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
          var_file: machines.tfvars.json
      - terraform/apply:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
          var_file: machines.tfvars.json

workflows:
  terraform-lotus-dev-machines:
    when:  << pipeline.parameters.provision_dev_machines >>
    jobs:
      - terraform-lotus-dev-machines:
          dev_machines: << pipeline.parameters.dev_machines >>
          aws_region: << pipeline.parameters.aws_region >>
          context:
            - filecoin-dev-aws-ec2

  butterfly-nightly:
    when:
      equal: [ "none", << pipeline.parameters.api_workflow_requested >> ]
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - /^(main|master)$/
    jobs:
      - lotus-build-containers:
          tag: master
          repo: coryschwartz
          network: butterflynet
          use_gitsha: true
      - helm-deploy:
          context: sentinel-staging-deploy
          requires:
            - lotus-build-containers
          cluster: mainnet-us-east-2-dev-eks
          region: us-east-2
          namespace: ntwk-butterfly-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_from_workspace: true
          matrix:
            parameters:
              release:
                - fullnode-0
                - fullnode-1
                - fullnode-2

  api-helm-deploy:
    when:
      equal: [ "helm-deploy", << pipeline.parameters.api_workflow_requested >> ]
    jobs:
      - helm-deploy:
          context: << pipeline.parameters.circle_context >>
          cluster: << pipeline.parameters.kubernetes_cluster >>
          region: << pipeline.parameters.aws_region >>
          namespace: << pipeline.parameters.namespace >>
          chart: << pipeline.parameters.chart >>
          chart_version: << pipeline.parameters.chart_version >>
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          release: << pipeline.parameters.release >>
          helm_append: << pipeline.parameters.helm_append >>

  api-lotus-ansible-reset-careful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-reset"
            - << pipeline.parameters.api_workflow_requested >>
        - << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-reset:
          name: ansible-reset-careful-check
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          install_network: << pipeline.parameters.lotus_install_network >>
          preseal: true
          create_cert: true
          build_flags: ""
          reset: true
          delay: "0"
          branch: << pipeline.parameters.override_tag >>
          check: true
      - reset-approval:
          type: approval
          requires:
            - ansible-reset-careful-check
      - lotus-ansible-reset:
          name: ansible-reset-careful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          install_network: << pipeline.parameters.lotus_install_network >>
          preseal: true
          create_cert: true
          build_flags: ""
          reset: true
          delay: "0"
          branch: << pipeline.parameters.override_tag >>
          check: false
          requires:
            - reset-approval

  api-lotus-ansible-reset-nocareful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-reset"
            - << pipeline.parameters.api_workflow_requested >>
        - not: << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-reset:
          name: ansible-reset-nocareful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          install_network: << pipeline.parameters.lotus_install_network >>
          preseal: true
          create_cert: true
          build_flags: ""
          reset: true
          delay: "0"
          branch: << pipeline.parameters.override_tag >>
          check: false

  api-lotus-ansible-upgrade-careful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-upgrade"
            - << pipeline.parameters.api_workflow_requested >>
        - << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-upgrade:
          name: ansible-upgrade-careful-check
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          build_flags: ""
          branch: << pipeline.parameters.override_tag >>
          check: true
      - upgrade-approval:
          type: approval
          requires:
            - ansible-upgrade-careful-check
      - lotus-ansible-upgrade:
          name: ansible-upgrade-careful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          build_flags: ""
          branch: << pipeline.parameters.override_tag >>
          check: false
          requires:
            - upgrade-approval

  api-lotus-ansible-upgrade-nocareful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-upgrade"
            - << pipeline.parameters.api_workflow_requested >>
        - not: << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-upgrade:
          name: ansible-upgrade-nocareful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          build_flags: ""
          branch: << pipeline.parameters.override_tag >>
          check: false

  # workflow to trigger when lotus creates a release

  api-lotus-release-automation:
    when:
      and:
        - equal:
            - "api-lotus-release-automation"
            - << pipeline.parameters.api_workflow_requested >>
    jobs:
      - lotus-release-update-calibration:
          name: update-canary
          branch: << pipeline.parameters.release >>
          group: canary
      - hold-for-approval:
          type: approval
          requires:
            - update-canary
      - lotus-release-update-calibration:
          name: update-all
          branch: << pipeline.parameters.release >>
          group: all
          requires:
            - hold-for-approval

  api-lotus-rollout:
    when:
      equal: [ "lotus-rollout", << pipeline.parameters.api_workflow_requested >> ]
    jobs:
      # butterflynet ansible
      - slack/on-hold:
          name: slack-on-hold
          channel: << pipeline.parameters.slack_channel >>
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "LOTUS ROLLOUT",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "woah, woah, woah!\nThis marks the start of a lotus rollout.\nFor safety, this doesn't start by default. Go to CircleCI and click the approval buttons to move this thing along.\n\n*lotus branch:* << pipeline.parameters.override_tag >>"
                  },
                  "accessory": {
                    "type": "image",
                    "image_url": "https://gist.githubusercontent.com/coryschwartz/69939cdc09bbc032e71099d4a679247d/raw/a1685f215311c0d1e37e879ad63a5336f619f1b4/slow.jpg",
                    "alt_text": "slow it down"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "url": "${CIRCLE_BUILD_URL}",
                      "text": {
                        "type": "plain_text",
                        "text": "View on CircleCI"
                      }
                    }
                  ]
                }
              ]
            }
      - start-rollout:
          type: approval
          requires:
            - slack-on-hold
      - lotus-build-containers:
          name: build-containers-calibrationnet
          tag: << pipeline.parameters.override_tag >>
          repo: << pipeline.parameters.override_repository >>
          use_gitsha: false
          network: calibnet
          requires:
            - start-rollout
      # calibrationnet on kubernetes
      - helm-deploy:
          name: helm-deploy-calibrationnet
          context: sentinel-staging-deploy
          cluster: mainnet-us-east-2-dev-eks
          region: us-east-2
          namespace: ntwk-calibnet-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          matrix:
            parameters:
              release:
                - fullnode-0
                - fullnode-1
                - fullnode-2
          requires:
           - build-containers-calibrationnet
      # calibrationnet ansible
      - lotus-ansible-reset:
          name: ansible-deploy-calibrationnet
          deploy_network: calibration.fildev.network
          install_network: calibnet
          preseal: false
          create_cert: false
          build_flags: "-f"
          reset: false
          delay: "0"
          requires:
            - start-rollout
      # mainnet
      - lotus-build-containers:
          name: build-containers-mainnet
          tag: << pipeline.parameters.override_tag >>
          repo: << pipeline.parameters.override_repository >>
          use_gitsha: false
          network: mainnet
      # Manual approvals for mainnet
      - start-bootstrap-mainnet-us-east-1-eks:
          type: approval
          requires:
           - build-containers-mainnet
      - start-bootstrap-mainnet-eu-central-1-eks:
          type: approval
          requires:
           - build-containers-mainnet
      - start-bootstrap-mainnet-ap-southeast-1-eks:
          type: approval
          requires:
           - build-containers-mainnet
      - start-fullnode-mainnet-us-east-1-eks:
          type: approval
          requires:
           - build-containers-mainnet

      # deploy bootstrappers one DC at a time
      # us-east-1 bootstrappers 0-2
      - helm-deploy:
          name: helm-deploy-bootstrap-0
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-0
          requires:
           - start-bootstrap-mainnet-us-east-1-eks
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-0
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-0-lotus-0
          requires:
           - helm-deploy-bootstrap-0
      - helm-deploy:
          name: helm-deploy-bootstrap-1
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-1
          requires:
           - lotus-sync-wait-bootstrap-0
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-1
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-1-lotus-0
          requires:
           - helm-deploy-bootstrap-1
      - helm-deploy:
          name: helm-deploy-bootstrap-2
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-2
          requires:
           - lotus-sync-wait-bootstrap-1
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-2
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-2-lotus-0
          requires:
           - helm-deploy-bootstrap-2

      # eu-central-1 bootstrappers 3-5
      - helm-deploy:
          name: helm-deploy-bootstrap-3
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-3
          requires:
           - start-bootstrap-mainnet-eu-central-1-eks
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-3
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-3-lotus-0
          requires:
           - helm-deploy-bootstrap-3
      - helm-deploy:
          name: helm-deploy-bootstrap-4
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-4
          requires:
           - lotus-sync-wait-bootstrap-3
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-4
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-4-lotus-0
          requires:
           - helm-deploy-bootstrap-4
      - helm-deploy:
          name: helm-deploy-bootstrap-5
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-5
          requires:
           - lotus-sync-wait-bootstrap-4
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-5
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-5-lotus-0
          requires:
           - helm-deploy-bootstrap-5

      # ap-southeast-1 bootstrappers 6-8
      - helm-deploy:
          name: helm-deploy-bootstrap-6
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-6
          requires:
           - start-bootstrap-mainnet-ap-southeast-1-eks
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-6
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-6-lotus-0
          requires:
           - helm-deploy-bootstrap-6
      - helm-deploy:
          name: helm-deploy-bootstrap-7
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-7
          requires:
           - lotus-sync-wait-bootstrap-6
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-7
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-7-lotus-0
          requires:
           - helm-deploy-bootstrap-7
      - helm-deploy:
          name: helm-deploy-bootstrap-8
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: bootstrap-8
          requires:
           - lotus-sync-wait-bootstrap-7
      - lotus-sync-wait:
          name: lotus-sync-wait-bootstrap-8
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-bootstrap
          pod: bootstrap-8-lotus-0
          requires:
           - helm-deploy-bootstrap-8

      # fullnodes, one at a time.
      - helm-deploy:
          name: helm-deploy-fullnode-0
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.2.0
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: fullnode-0
          requires:
           - start-fullnode-mainnet-us-east-1-eks
      - start-fullnode-1:
          type: approval
          requires:
           - helm-deploy-fullnode-0
      - helm-deploy:
          name: helm-deploy-fullnode-1
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.2.0
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: fullnode-1
          requires:
           - start-fullnode-1
      - start-fullnode-2:
          type: approval
          requires:
           - helm-deploy-fullnode-1
      - helm-deploy:
          name: helm-deploy-fullnode-2
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.2.0
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: fullnode-2
          requires:
           - start-fullnode-2
      - start-fullnode-6:
          type: approval
          requires:
           - helm-deploy-fullnode-2
      - helm-deploy:
          name: helm-deploy-fullnode-6
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: fullnode-6
          requires:
           - start-fullnode-6
      - start-fullnode-7:
          type: approval
          requires:
           - helm-deploy-fullnode-6
      - helm-deploy:
          name: helm-deploy-fullnode-7
          context: filecoin-mainnet-aws
          cluster: mainnet-us-east-1-eks
          region: us-east-1
          namespace: ntwk-mainnet-fullnode
          chart: filecoin/lotus-fullnode
          chart_version: 0.3.1
          override_repository: << pipeline.parameters.override_repository >>
          override_tag: << pipeline.parameters.override_tag >>
          helm_append: << pipeline.parameters.helm_append >>
          release: fullnode-7
          requires:
           - start-fullnode-7
