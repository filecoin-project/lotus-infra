version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  aws-cli: circleci/aws-cli@2.0.0
  ansible-playbook: orbss/ansible-playbook@0.0.5
  rust: circleci/rust@1.5.0
  go: circleci/go@1.6.0
  slack: circleci/slack@4.4.2
  terraform: circleci/terraform@3.0.0

# Some of the workflows in this CI config are intended to be triggered over the CircleCI API
# The Circle v2 API allows API users to call a pipeline, and conditionally execute workflows.
# When editing this file, be careful to make sure workflows are run at the right time.

parameters:
  api_workflow_requested:
    type: string
    default: "none"
    description: run different workflows depending on whether triggered through api or git push
  circle_context:
    type: string
    default: sentinel-staging-deploy
    description: circleci context (environment variables, etc) to use
  aws_region:
    type: string
    default: us-east-2
    description: aws region. should be the region where the kubernetes cluster is running.
  release:
    type: string
    default: "lotus-infra_circleci_default_release_changeme"
  override_repository:
    type: string
    default: ""
  override_tag:
    type: string
    default: ""
  be_careful:
    type: boolean
    default: true
  lotus_install_network:
    type: string
    default: ""
  lotus_deploy_network:
    type: string
    default: ""
  provision_dev_machines:
    type: boolean
    default: false
  dev_machines:
    type: string
    default: ""
  slack_channel:
    type: string
    default: "netops-circleci-test"


commands:
  git-clone:
    parameters:
      repo:
        type: string
        description: repo url
      where:
        type: string
        description: where to save
      branch:
        type: string
        default: "master"
        description: branch to checkout
    steps:
      - run:
          command: git clone --recurse-submodules --branch << parameters.branch >> << parameters.repo >> << parameters.where >>
  docker-login:
    steps:
      - run:
          command: echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin

jobs:
  # build and push lotus.
  lotus-build-containers:
    parameters:
      tag:
        type: string
        description: lotus tag to checkout
      repo:
        type: string
        description: docker repository
      network:
        type: string
        description: filecoin network
      use_gitsha:
        type: boolean
        default: false
        description: append gitsha to image tag (useful when tag is master)
    machine:
      image: default
    steps:
      - checkout
      - docker-login
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $HOME/lotus
          branch: << parameters.tag >>
      - run:
          name: push docker << parameters.network >> << parameters.tag >> to << parameters.repo >>
          environment:
            USE_GITSHA: << parameters.use_gitsha >>
            DOCKER_TAG: << parameters.network >>-<< parameters.tag >>
          command: |
            echo "gitsha: $USE_GITSHA"
            if [ $USE_GITSHA -eq 1 ]
            then
              echo "gitsha was true"
              DOCKER_TAG=$DOCKER_TAG-$CIRCLE_SHA1
            fi
            scripts/build_containers.bash --src $HOME/lotus --network << parameters.network >> --tag << parameters.tag >> --docker-tag $DOCKER_TAG --repo << parameters.repo >>
            mkdir -p /tmp/circle
            echo -n $DOCKER_TAG > /tmp/circle/docker_tag
            echo -n << parameters.repo >>/lotus > /tmp/circle/docker_repo
      - persist_to_workspace:
          root: /tmp/circle
          paths:
            - docker_tag
            - docker_repo

  lotus-ansible-reset:
    parameters:
      install_network:
        type: string
      deploy_network:
        type: string
      preseal:
        type: boolean
        default: true
      create_cert:
        type: boolean
        default: true
      build_flags:
        type: string
        default: "-f"
      reset:
        type: boolean
        default: true
      delay:
        type: string
        default: "0"
      branch:
        type: string
        default: "master"
      check:
        type: boolean
        default: true
    machine:
      image: default
      docker_layer_caching: true
    resource_class: 2xlarge
    environment:
      LOTUSROOT: /home/circleci/.go_workspace/src/github.com/filecoin-project/lotus
    steps:
      # - slack/notify:
      #     event: always
      #     channel: << pipeline.parameters.slack_channel >>
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "DEVNET ANSIBLE DEPLOYMENT :filecoin-new:",
      #               "emoji": true
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "The network will be reset in about 30 mintues.\nplease check functionality manually once this is complete\n\n*network:* << parameters.deploy_network >>\n*branch:* << parameters.branch >>"
      #             }
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "url": "${CIRCLE_BUILD_URL}",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View on CircleCI"
      #                 }
      #               }
      #             ]
      #           }
      #         ]
      #       }
      - checkout
      - aws-cli/install
      - rust/install
      - run:
          name: install golang
          command: |
            curl -LOs https://golang.org/dl/go1.20.7.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.20.7.linux-amd64.tar.gz
      # - go/install:
      #   # ensure that the cache key matches the go version to clean up lingering source files
      #   # that may not be compatable across versions. Golang recommend to always uninstall the
      #   # entire go directory when updating the install golang version.
      #   # https://golang.org/doc/install
      #   # https://github.com/CircleCI-Public/go-orb/issues/46
      #     version: 1.16.5
      #     cache-key: v1.16.5
      - ansible-playbook/install
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $LOTUSROOT
          branch: << parameters.branch >>
      - run:
          name: install lotus software
          command: |
            sudo apt-get update
            sudo apt-get install libhwloc-dev ocl-icd-opencl-dev
            sudo ln -s /usr/lib/x86_64-linux-gnu/libhwloc.so.15 /usr/lib/x86_64-linux-gnu/libhwloc.so.5
            cd $LOTUSROOT
            GOFLAGS+=-tags=<< parameters.install_network >> make lotus-shed lotus-seed
            sudo install -o root -g root -m 0755 ./lotus-seed ./lotus-shed /usr/local/bin
      - run:
          name: setup secrets
          command: |
            cd ansible
            echo $ANSIBLE_VAULT_PASSWORD > .vault_password
      - run:
          name: ansible reset << parameters.deploy_network >>
          no_output_timeout: 30m
          command: |
            args=(
              "-n" "<< parameters.deploy_network >>"
              "-s" "$LOTUSROOT"
              "-b" "<< parameters.build_flags >>"
              "-d" "<< parameters.delay >>"
              "--verbose"
            )
            << parameters.reset >> && args+=("-r")
            << parameters.preseal >> && args+=("-p")
            << parameters.create_cert >> && args+=("-c")
            << parameters.check >> && args+=("--check")
            cd ansible
            export GOPATH=/home/circleci/.go_workspace
            export TERM=xterm
            echo | ./setup_fildev_network.bash --start-services false "${args[@]}"
      - run:
          name: "halt if check-mode"
          command: |
            << parameters.check >> && circleci-agent step halt; true
      - run:
          name: "remove faucet maintenance"
          command: |
            cd ansible
            ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m file -a 'state=link src=/etc/nginx/sites-available/faucet.conf dest=/etc/nginx/sites-enabled/50-faucet.conf' faucet
      - run:
          name: "restart machines"
          command: |
            cd ansible
            << parameters.check >> || ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m reboot all
      - run:
          name: "capture new genesis"
          command: |
            mkdir /tmp/reset
            ./scripts/encrypt_vault_files.bash
            ./scripts/bundle_changes.bash . /tmp/reset/lotus-infra
            ./scripts/bundle_changes.bash ${LOTUSROOT} /tmp/reset/lotus
      - store_artifacts:
          path: /tmp/reset
      # - run:
      #     name: "upload genesis"
      #     command:
      #       cd $LOTUSROOT
      #       git config --global user.name "filecoin"
      #       git config --global user.email "noreply@filecoin.io"
      #       git commit -am "automated genesis build"
      #       git push origin HEAD:new-genesis-$(date +%d%h%y-%H%M)
  lotus-build-binaries:
    parameters:
      # this can be any git ref (eg: branch, tag, commit)
      gitref:
        type: string
        default: "NeVeRmAtCh"
      # lotus uses build flags, a network to build is required
      network:
        type: string
        default: "NeVeRmAtCh"
      repository:
        type: string
        default: "lotus"
    # binary building is done via a docker build image with a mounted filesystem
    machine:
      image: default
      docker_layer_caching: true
    resource_class: 2xlarge
    environment:
      LOTUS_SRC: /home/circleci/lotus
    steps:
      - checkout
      - git-clone:
          repo: https://github.com/filecoin-project/<< parameters.repository >>
          where: $LOTUS_SRC
          branch: << parameters.gitref >>
      - run:
          name: Build binaries
          command: |
            args=(
              "--network" "<< parameters.network >>"
              "--src" "$LOTUS_SRC"
            )
            unset GOPATH
            ./scripts/build_binaries.bash "${args[@]}"
      - run:
          name: Prepare binaries
          command: |
              bin="/tmp/circle/lotus/<< parameters.network >>/bin/"
              mkdir -p $bin
              pushd $LOTUS_SRC
              cp lotus            \
                 lotus-worker     \
                 lotus-miner      \
                 lotus-shed       \
                 lotus-seed       \
                 lotus-fountain   \
                 lotus-stats      \
                 $bin
      - persist_to_workspace:
          root: /tmp/circle
          paths:
            - lotus/<< parameters.network >>/bin

  lotus-release-update-calibration:
    parameters:
      # This can be any git ref (eg: branch, tag, commit)
      gitref:
        type: string
        default: "NeVeRmAtCh"
      group:
        type: string
        default: "NeVeRmAtCh"
      network:
        type: string
        default: "calibration.fildev.network"
    executor:
      name: ansible-playbook/default
      python-version: "3.8"
      debian-release: "buster"
    steps:
      # - slack/notify:
      #     event: always
      #     channel: "#netops-circleci-test"
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "LOTUS RELEASE TESTNET UPDATE :filecoin-new:",
      #               "emoji": true
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "A lotus release has triggered an update to the calibration network.\n\n*release*: << parameters.gitref >>\n*group*: << parameters.group >>\n\n"
      #             }
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "url": "${CIRCLE_BUILD_URL}",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View on CircleCI"
      #                 }
      #               }
      #             ]
      #           }
      #         ]
      #       }
      - checkout
      - ansible-playbook/install
      - attach_workspace:
          at: /tmp/circle
      - run:
          name: setup vault secrets
          command: |
            cd ansible
            echo $ANSIBLE_VAULT_PASSWORD > .vault_password
      - run:
          name: update << parameters.group >>
          no_output_timeout: 30m
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
          command: |
            cd ansible
            hostfile="inventories/<< parameters.network >>/hosts.yml"
            network_flag=$(ansible -o -i $hostfile -b -m debug -a 'msg="{{ network_flag }}"' preminer0 | sed 's/.*=>//' | jq -r '.msg')
            ansible-playbook -i $hostfile lotus_update.yml                     \
            -e binary_src="/tmp/circle/lotus/$network_flag/bin"                \
            -e upgrade_reboot_daemon="yes"                                     \
            --diff --limit "<< parameters.group >>"

  lotus-ansible-upgrade:
    parameters:
      deploy_network:
        type: string
      build_flags:
        type: string
        default: "-f"
      branch:
        type: string
        default: "master"
      check:
        type: boolean
        default: true
    machine:
      image: default
      docker_layer_caching: true
    resource_class: 2xlarge
    environment:
      LOTUSROOT: /home/circleci/.go_workspace/src/github.com/filecoin-project/lotus
    steps:
      # - slack/notify:
      #     event: always
      #     channel: << pipeline.parameters.slack_channel >>
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "DEVNET ANSIBLE UPGRADE :filecoin-new:",
      #               "emoji": true
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "network binaries will be upgraded in about 10 mintues.\nplease check functionality manually once this is complete\n\n*network:* << parameters.deploy_network >>\n*branch:* << parameters.branch >>"
      #             }
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "url": "${CIRCLE_BUILD_URL}",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View on CircleCI"
      #                 }
      #               }
      #             ]
      #           }
      #         ]
      #       }
      - checkout
      - aws-cli/install
      - rust/install
      - run:
          name: install golang
          command: |
            curl -LOs https://golang.org/dl/go1.20.7.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.20.7.linux-amd64.tar.gz
      # - go/install:
      #     version: 1.16.5
      #     cache-key: v1.16.5
      - ansible-playbook/install
      - git-clone:
          repo: https://github.com/filecoin-project/lotus
          where: $LOTUSROOT
          branch: << parameters.branch >>
      - run:
          name: setup secrets
          command: |
            cd ansible
            echo $ANSIBLE_VAULT_PASSWORD > .vault_password
      - run:
          name: ansible upgrade << parameters.deploy_network >>
          no_output_timeout: 30m
          command: |
            args=(
              "-n" "<< parameters.deploy_network >>"
              "-s" "$LOTUSROOT"
              "-b" "<< parameters.build_flags >>"
              "--verbose"
            )
            << parameters.check >> && args+=("--check")
            cd ansible
            unset GOPATH
            ./upgrade_fildev_network_binaries.bash "${args[@]}"
      - run:
          name: "remove faucet maintenance"
          command: |
            cd ansible
            ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m file -a 'state=link src=/etc/nginx/sites-available/faucet.conf dest=/etc/nginx/sites-enabled/50-faucet.conf' faucet
      - run:
          name: "restart machines"
          command: |
            cd ansible
            << parameters.check >> || ansible -i inventories/<< parameters.deploy_network >>/hosts.yml -b -m reboot all

  terraform-lotus-dev-machines:
    parameters:
      dev_machines:
        type: string
      aws_region:
        type: string
        default: us-east-2
      slack_channel:
        type: string
        default: "#netops-circleci-test"
    machine:
      image: default
      docker_layer_caching: true
    environment:
      AWS_REGION: << parameters.aws_region >>
    steps:
      # - slack/notify:
      #     event: always
      #     channel: << pipeline.parameters.slack_channel >>
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "Lotus Dev Machines DEPLOYMENT :shipitparrot: :rocket:",
      #               "emoji": true
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "Lotus Dev Machines are being deployed. Check the last step (terraform apply) for SSH connection strings"
      #             }
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "url": "${CIRCLE_BUILD_URL}",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View on CircleCI"
      #                 }
      #               }
      #             ]
      #           }
      #         ]
      #       }
      - checkout
      - run:
          name: write machines json to file
          command: |
            echo '<< parameters.dev_machines >>' > terraform/lotus-dev-machines/<< parameters.aws_region >>/machines.tfvars.json
      - terraform/install:
          arch: amd64
          os: linux
          terraform_version: 1.0.8
      - terraform/validate:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
      - terraform/init:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
      - terraform/plan:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
          var_file: machines.tfvars.json
      - terraform/apply:
          path: terraform/lotus-dev-machines/<< parameters.aws_region >>
          var_file: machines.tfvars.json
      - run:
          name: SSH Connection Strings
          command: |
            cd terraform/lotus-dev-machines/<< parameters.aws_region >>
            terraform output | sed 's@\\@@g'

workflows:
  terraform-lotus-dev-machines:
    when:  << pipeline.parameters.provision_dev_machines >>
    jobs:
      - terraform-lotus-dev-machines:
          dev_machines: << pipeline.parameters.dev_machines >>
          aws_region: << pipeline.parameters.aws_region >>
          context:
            - filecoin-dev-aws-ec2

  api-lotus-ansible-reset-careful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-reset"
            - << pipeline.parameters.api_workflow_requested >>
        - << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-reset:
          name: ansible-reset-careful-check
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          install_network: << pipeline.parameters.lotus_install_network >>
          preseal: true
          create_cert: true
          build_flags: ""
          reset: true
          delay: "0"
          branch: << pipeline.parameters.override_tag >>
          check: true
      - reset-approval:
          type: approval
          requires:
            - ansible-reset-careful-check
      - lotus-ansible-reset:
          name: ansible-reset-careful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          install_network: << pipeline.parameters.lotus_install_network >>
          preseal: true
          create_cert: true
          build_flags: ""
          reset: true
          delay: "0"
          branch: << pipeline.parameters.override_tag >>
          check: false
          requires:
            - reset-approval

  api-lotus-ansible-reset-nocareful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-reset"
            - << pipeline.parameters.api_workflow_requested >>
        - not: << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-reset:
          name: ansible-reset-nocareful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          install_network: << pipeline.parameters.lotus_install_network >>
          preseal: true
          create_cert: true
          build_flags: ""
          reset: true
          delay: "0"
          branch: << pipeline.parameters.override_tag >>
          check: false

  api-lotus-ansible-upgrade-careful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-upgrade"
            - << pipeline.parameters.api_workflow_requested >>
        - << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-upgrade:
          name: ansible-upgrade-careful-check
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          build_flags: ""
          branch: << pipeline.parameters.override_tag >>
          check: true
      - upgrade-approval:
          type: approval
          requires:
            - ansible-upgrade-careful-check
      - lotus-ansible-upgrade:
          name: ansible-upgrade-careful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          build_flags: ""
          branch: << pipeline.parameters.override_tag >>
          check: false
          requires:
            - upgrade-approval

  api-lotus-ansible-upgrade-nocareful:
    when:
      and:
        - equal:
            - "lotus-devnet-ansible-upgrade"
            - << pipeline.parameters.api_workflow_requested >>
        - not: << pipeline.parameters.be_careful >>
    jobs:
      - lotus-ansible-upgrade:
          name: ansible-upgrade-nocareful
          deploy_network: << pipeline.parameters.lotus_deploy_network >>
          build_flags: ""
          branch: << pipeline.parameters.override_tag >>
          check: false

  # workflow to trigger when lotus creates a release

  api-lotus-release-automation:
    when:
      and:
        - equal:
            - "api-lotus-release-automation"
            - << pipeline.parameters.api_workflow_requested >>
    jobs:
      - lotus-build-binaries:
          name: build-binaries-mainnet
          gitref: << pipeline.parameters.release >>
          network: mainnet
          repository: lotus
      - lotus-build-binaries:
          name: build-binaries-calibnet
          gitref: << pipeline.parameters.release >>
          network: calibnet
          repository: lotus
      - lotus-release-update-calibration:
          name: update-canary
          gitref: << pipeline.parameters.release >>
          group: canary
          requires:
            - build-binaries-calibnet
      - hold-for-approval:
          type: approval
          requires:
            - update-canary
      - lotus-release-update-calibration:
          name: update-all
          gitref: << pipeline.parameters.release >>
          group: all
          requires:
            - hold-for-approval

  api-lotus-rollout:
    when:
      equal: [ "lotus-rollout", << pipeline.parameters.api_workflow_requested >> ]
    jobs:
      # butterflynet ansible
      # - slack/on-hold:
      #     name: slack-on-hold
      #     channel: << pipeline.parameters.slack_channel >>
      #     custom: |
      #       {
      #         "blocks": [
      #           {
      #             "type": "header",
      #             "text": {
      #               "type": "plain_text",
      #               "text": "LOTUS ROLLOUT",
      #               "emoji": true
      #             }
      #           },
      #           {
      #             "type": "section",
      #             "text": {
      #               "type": "mrkdwn",
      #               "text": "woah, woah, woah!\nThis marks the start of a lotus rollout.\nFor safety, this doesn't start by default. Go to CircleCI and click the approval buttons to move this thing along.\n\n*lotus branch:* << pipeline.parameters.override_tag >>"
      #             },
      #             "accessory": {
      #               "type": "image",
      #               "image_url": "https://gist.githubusercontent.com/coryschwartz/69939cdc09bbc032e71099d4a679247d/raw/a1685f215311c0d1e37e879ad63a5336f619f1b4/slow.jpg",
      #               "alt_text": "slow it down"
      #             }
      #           },
      #           {
      #             "type": "actions",
      #             "elements": [
      #               {
      #                 "type": "button",
      #                 "url": "${CIRCLE_BUILD_URL}",
      #                 "text": {
      #                   "type": "plain_text",
      #                   "text": "View on CircleCI"
      #                 }
      #               }
      #             ]
      #           }
      #         ]
      #       }
      - start-rollout:
          type: approval
          requires:
            - slack-on-hold
      - lotus-build-containers:
          name: build-containers-calibrationnet
          tag: << pipeline.parameters.override_tag >>
          repo: << pipeline.parameters.override_repository >>
          use_gitsha: false
          network: calibnet
          requires:
            - start-rollout
      # calibrationnet ansible
      - lotus-ansible-reset:
          name: ansible-deploy-calibrationnet
          deploy_network: calibration.fildev.network
          install_network: calibnet
          preseal: false
          create_cert: false
          build_flags: "-f"
          reset: false
          delay: "0"
          requires:
            - start-rollout
      # mainnet
      - lotus-build-containers:
          name: build-containers-mainnet
          tag: << pipeline.parameters.override_tag >>
          repo: << pipeline.parameters.override_repository >>
          use_gitsha: false
          network: mainnet
