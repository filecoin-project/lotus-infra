name: "Lotus Ansible Reset"
description: "Composite action to reset Lotus using Ansible"
inputs:
  network:
    description: "The network to reset, e.g. 'butterflynet'"
    required: true
  preseal:
    description: "Preseal"
    required: false
    default: "true"
  create_cert:
    description: "Create certificate"
    required: false
    default: "true"
  build_flags:
    description: "Build flags"
    required: false
    default: "-f"
  reset:
    description: "Reset"
    required: false
    default: "true"
  delay:
    description: "Delay"
    required: false
    default: "0"
  check:
    description: "Dry-run ansible"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Check environment
      shell: bash
      run: |
        if [ -z "$GOPATH" ]; then
          echo "::error::GOPATH is not set"
          exit 1
        fi
        if [ -z "$LOTUSROOT" ]; then
          echo "::error::LOTUSROOT is not set"
          exit 1
        fi
    - name: Setup environment variables
      shell: bash
      run: |
        # Infer deploy network from network name to reduce unnecessary noise in actions inputs.
        DEPLOY_NETWORK=$(
          case ${{ inputs.network }} in
          butterflynet) printf 'butterfly.fildev.network' ;;
          *) echo 'Unknown network: ${{ env.NETWORK }}' >&2; exit 1 ;;
          esac
        )
        echo "DEPLOY_NETWORK=${DEPLOY_NETWORK}" >> $GITHUB_ENV
    - name: Install Lotus Software
      shell: bash
      working-directory: ${{ env.LOTUSROOT }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libhwloc-dev ocl-icd-opencl-dev pkg-config
        sudo ln -s /usr/lib/x86_64-linux-gnu/libhwloc.so.15 /usr/lib/x86_64-linux-gnu/libhwloc.so.5
        GOFLAGS+=-tags=${{ inputs.network }} make lotus-shed lotus-seed
        sudo install -o root -g root -m 0755 ./lotus-seed ./lotus-shed /usr/local/bin

    - name: Ansible Reset ${{ inputs.network }}
      shell: bash
      working-directory: ansible
      env:
        BUILD_FLAGS: ${{ inputs.build_flags }}
        DELAY: ${{ inputs.delay }}
        RESET: ${{ inputs.reset }}
        PRESEAL: ${{ inputs.preseal }}
        CREATE_CERT: ${{ inputs.create_cert }}
        CHECK: ${{ inputs.check }}
      run: |
        args=(
          "-n" "${DEPLOY_NETWORK}"
          "-s" "${LOTUSROOT}"
          "-b" "${BUILD_FLAGS}"
          "-d" "${DELAY}"
          "--verbose"
        )
        [ "${RESET}" == "true" ] && args+=("-r")
        [ "${PRESEAL}" == "true" ] && args+=("-p")
        [ "${CREATE_CERT}" == "true" ] && args+=("-c")
        [ "${CHECK}" == "true" ] && args+=("--check")

        export TERM=xterm
        echo | ./setup_fildev_network.bash --start-services false "${args[@]}"

    - name: Remove Faucet Maintenance
      if: ${{ inputs.check == 'false' }}
      shell: bash
      working-directory: ansible
      run: |
        ansible -i inventories/${DEPLOY_NETWORK}/hosts.yml -b -m file -a 'state=link src=/etc/nginx/sites-available/faucet.conf dest=/etc/nginx/sites-enabled/50-faucet.conf' faucet

    - name: Restart Machines
      if: ${{ inputs.check == 'false' }}
      shell: bash
      working-directory: ansible
      run: |
        ansible -i inventories/${DEPLOY_NETWORK}/hosts.yml -b -m reboot all

    - name: Capture New Genesis
      if: ${{ inputs.check == 'false' }}
      shell: bash
      run: |
        mkdir /tmp/reset
        ./scripts/encrypt_vault_files.bash
        ./scripts/bundle_changes.bash . /tmp/reset/lotus-infra
        ./scripts/bundle_changes.bash ${LOTUSROOT} /tmp/reset/lotus

    - name: Store Artifacts
      if: ${{ inputs.check == 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: reset-artifacts
        path: /tmp/reset
